package cn.hyrkg.fastspigot.spigot.service.config;

import cn.hyrkg.fastspigot.innercore.framework.HandlerInfo;
import cn.hyrkg.fastspigot.innercore.framework.interfaces.IImplementation;
import org.bukkit.ChatColor;
import org.bukkit.configuration.ConfigurationSection;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class FastConfigImpl implements IImplementation<IFastYamlConfig> {
    private IFastYamlConfig handlerInstance;
    private HandlerInfo handlerInfo;

    @Override
    public void handleHandler(IFastYamlConfig handlerInstance, HandlerInfo handlerInfo) {
        this.handlerInstance = handlerInstance;
        this.handlerInfo = handlerInfo;

        if (handlerInstance.shouldAutoParser())
            parserFields(handlerInstance, handlerInfo);
    }

    /**
     * Load @AutoLoad fields from configuration section.
     **/
    private void parserFields(IFastYamlConfig fastConfigInterface, HandlerInfo handlerInfo) {
        ConfigurationSection section = fastConfigInterface.getConfigSection();

        if (section == null) {
            handlerInfo.innerCore.getCreator().error(handlerInfo.originClass.getSimpleName() + " parser fields was skipped because null section!");
            return;
        }

        //the count of auto generated configurations
        int countConfigAutoGenerated = 0;

        //make sure super classes configurations @AutoLoad fields loaded
        ArrayList<Class> clazzIncludeSuper = new ArrayList<>();
        clazzIncludeSuper.add(handlerInfo.originClass);
        Class superClazz = handlerInfo.originClass;
        while (superClazz.getSuperclass() != null && !superClazz.equals(Object.class)) {
            superClazz = superClazz.getSuperclass();
            clazzIncludeSuper.add(superClazz);
        }


        //load clazz and its fields one by one
        for (Class clazz : clazzIncludeSuper) {
            //skip Object.class because It wont have @AutoLoad fields.
            if (clazz.equals(Object.class))
                continue;

            //start parsing!
            fastConfigInterface.debug(">> clazz loading " + clazz.getSimpleName());
            boolean isDebugging = fastConfigInterface.isDebugging();
            //load fields one by one
            for (Field field : clazz.getDeclaredFields()) {
                try {
                    //check is @AutoLoad annotated or skip
                    if (field.isAnnotationPresent(AutoLoad.class)) {
                        field.setAccessible(true);
                        AutoLoad autoLoadInfo = field.getAnnotation(AutoLoad.class);

                        String path = autoLoadInfo.path();
                        path = path.isEmpty() ? "" : path + "."; //修正路径
                        String name = autoLoadInfo.name().isEmpty() ? field.getName() : autoLoadInfo.name();
                        String fullPath = (path + name).trim();

                        //转换路径解析方式，将驼峰拆分为下环线
                        if (!section.contains(fullPath)) {
                            
                        }

                        if (section.contains(fullPath)) {
                            //load field value from configuration section
                            field.setAccessible(true);
                            if (Modifier.isStatic(field.getModifiers()))
                                field.set(null, readFieldValueFromSection(fullPath, section, field));
                            else
                                field.set(fastConfigInterface, readFieldValueFromSection(fullPath, section, field));
                        } else if (fastConfigInterface.isAutoGenerateMissingConfig()) {
                            //generate default configurations
                            saveFieldDefaultValueToSection(fullPath, section, field, fastConfigInterface);

                            countConfigAutoGenerated += 1;
                        }
                        if (isDebugging) {
                            if (Modifier.isStatic(field.getModifiers()))
                                fastConfigInterface.debug(ChatColor.RESET + "@" + field.getName() + ": " + field.get(null));
                            else
                                fastConfigInterface.debug(ChatColor.RESET + "@" + field.getName() + ": " + field.get(fastConfigInterface));
                        }
                    }
                } catch (ErrorAutoloadException autoloadException) {
                    fastConfigInterface.error("读取配置错误: " + autoloadException.errorMessage);
                } catch (Exception exception) {
                    exception.printStackTrace();
                    fastConfigInterface.error("发生了错误: " + exception.getMessage());
                }
            }
        }

        if (countConfigAutoGenerated > 0) {
            fastConfigInterface.saveConfigurationFile(section);
            fastConfigInterface.error("Auto generated " + countConfigAutoGenerated + " configuration(s)");
        }
    }

    /**
     * Read each field's value from section according to its type
     **/
    private Object readFieldValueFromSection(String path, ConfigurationSection configurationSection, Field field) {
        Class type = field.getType();

        if (type.equals(String.class))
            return configurationSection.getString(path);
        else if (type.equals(double.class) || type.equals(Double.class))
            return configurationSection.getDouble(path);
        else if (type.equals(int.class) || type.equals(Integer.class))
            return configurationSection.getInt(path);
        else if (type.equals(boolean.class) || type.equals(Boolean.class))
            return configurationSection.getBoolean(path);
        else if (type.equals(ArrayList.class) || type.equals(List.class)) {
            ArrayList<String> list = new ArrayList<>();
            list.addAll(configurationSection.getStringList(path));
            return list;
        } else if (type.equals(HashMap.class)) {
            //TODO will add parameterized type check

            HashMap<String, String> map = new HashMap<>();
            for (String key : configurationSection.getConfigurationSection(path).getKeys(false)) {
                String value = configurationSection.getString(path + "." + key);
                map.put(key, value);
            }
            return map;
        }

        throw new ErrorAutoloadException("Wrong autoload type " + field.getType());
    }

    /**
     * Save field default value into section
     */
    private void saveFieldDefaultValueToSection(String path, ConfigurationSection configurationSection, Field field, Object fieldInstance) {
        try {
            Object value;
            //load field value
            if (Modifier.isStatic(field.getModifiers()))
                value = field.get(null);
            else
                value = field.get(fieldInstance);

            configurationSection.set(path, value);
        } catch (IllegalAccessException exception) {
            throw new ErrorAutoloadException("IllegalAccessException: " + field.getType() + "(" + exception.getMessage() + ")");
        }
    }


    public void parser() {
        parserFields(handlerInstance, handlerInfo);
    }

    public void reload() {
        parser();
    }
}
